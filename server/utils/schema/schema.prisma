generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL")
}

model User {
  name       String
  email      String     @unique
  profile_id String     @id @unique
  auth       Auth?
  documents  Document[]
  chats      Chat[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([profile_id])
}

model Auth {
  reddit_id     String?  @unique
  twitter_id    String?  @unique
  pocket_id     String?  @unique
  google_id     String?  @unique
  password_salt String?  @unique
  profile_id    String   @id @unique
  user          User     @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  google        Google?
  reddit        Reddit?
  twitter       Twitter?
  pocket        Pocket?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([profile_id])
}

model Google {
  access_token  String   @unique
  refresh_token String   @unique
  google_id     String   @id @unique
  auth          Auth     @relation(fields: [google_id], references: [profile_id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Reddit {
  access_token  String   @unique
  refresh_token String   @unique
  reddit_id     String   @id @unique
  auth          Auth     @relation(fields: [reddit_id], references: [profile_id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Twitter {
  access_token  String   @unique
  refresh_token String   @unique
  twitter_id    String   @id @unique
  auth          Auth     @relation(fields: [twitter_id], references: [profile_id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Pocket {
  access_token String   @unique
  pocket_id    String   @id @unique
  auth         Auth     @relation(fields: [pocket_id], references: [profile_id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Document {
  source     String
  body       String
  heading    String
  url        String?
  profile_id String   @id @unique
  user       User     @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([profile_id])
}

model Chat {
  chat_id      String        @id @unique
  profile_id   String        @unique
  chat_history String
  user         User          @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  chatSettings ChatSettings?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([chat_id, profile_id])
}

model ChatSettings {
  llm_model    String   @default("ChatGPT")
  data_sources String[]
  chat_id      String   @id @unique
  chat         Chat     @relation(fields: [chat_id], references: [chat_id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

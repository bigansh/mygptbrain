generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRESQL")
  shadowDatabaseUrl = env("POSTGREURLSHADOW")
}

model User {
  name         String
  email        String        @unique
  profile_id   String        @id @unique @default(uuid())
  stripe_id    String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  auth         Auth?
  chats        Chat[]
  documents    Document[]
  userMetadata UserMetadata?

  @@index([profile_id, email])
}

model UserMetadata {
  profile_id              String   @id @unique
  subscription_status     Boolean  @default(false)
  prompt_templates        String[] @default(["You are a helpful assistant that answers questions only with the data and the context at hand. You don't generate random answers or hallucinate based on your base model. You provide concise answers to every question with no filler words. If an answer is much better represented in bullet points, answer in bullet points. If an answer to a question requires detailed paragraphs, use paragraphs to answer the question.", "Aim for 3-5 clear, informative points per response that directly address the user's query. Prioritize information based on its importance and relevance, using numbers or symbols to organize the points. Start each bullet point with a strong action verb or keyword to grab the user's attention and avoid unnecessary details or jargon. If further information is available, offer resources for independent exploration. If a query requires more nuance, provide a brief bullet-point summary. Maintain a professional and informative tone and continuously learn to improve your ability to generate accurate and helpful bullet-point responses.", ""])
  default_prompt_template String   @default("0")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
}

model Auth {
  auth_id       String   @id @unique @default(uuid())
  reddit_id     String?  @unique
  twitter_id    String?  @unique
  pocket_id     String?  @unique
  google_id     String?  @unique
  password_salt String?  @unique
  notion_id     String?  @unique
  profile_id    String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  google        Google?
  pocket        Pocket?
  reddit        Reddit?
  twitter       Twitter?
  notion        Notion?

  @@index([profile_id])
}

model Notion {
  access_token String   @unique
  notion_id    String   @id @unique
  workspace_id String   @unique
  pages_ids    String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  auth         Auth     @relation(fields: [notion_id], references: [notion_id], onDelete: Cascade)
}

model Google {
  access_token        String   @unique
  refresh_token       String   @unique
  google_id           String   @id @unique
  scope_authenticated String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  auth                Auth     @relation(fields: [google_id], references: [google_id], onDelete: Cascade)
}

model Reddit {
  access_token  String   @unique
  refresh_token String   @unique
  reddit_id     String   @id @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  auth          Auth     @relation(fields: [reddit_id], references: [reddit_id], onDelete: Cascade)
}

model Twitter {
  access_token  String   @unique
  refresh_token String   @unique
  twitter_id    String   @id @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  auth          Auth     @relation(fields: [twitter_id], references: [twitter_id], onDelete: Cascade)
}

model Pocket {
  access_token String   @unique
  pocket_id    String   @id @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  auth         Auth     @relation(fields: [pocket_id], references: [pocket_id], onDelete: Cascade)
}

model Document {
  document_id      String            @id @unique @default(uuid())
  profile_id       String
  body             String
  heading          String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  documentMetadata DocumentMetadata?

  @@index([profile_id, document_id])
}

model DocumentMetadata {
  document_id        String   @id @unique
  source             String
  twitter_status_id  String?
  reddit_post_id     String?
  pocket_article_id  String?
  document_file_type String?
  notion_document_id String?
  drive_document_id  String?
  keep_id            String?
  url                String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  document           Document @relation(fields: [document_id], references: [document_id], onDelete: Cascade)
}

model Chat {
  chat_id          String           @id @unique @default(uuid())
  chat_name        String
  profile_id       String
  chat_array       Json[]
  source_documents String[]
  chat_history     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  preferences      ChatPreferences?

  @@index([chat_id, profile_id])
}

model ChatPreferences {
  chat_id         String   @id @unique
  llm_model       String   @default("ChatGPT")
  data_sources    String[] @default(["All"])
  send_type       String   @default("Stuff")
  document_id     String?
  prompt_template String?  @default("0")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chat            Chat     @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
}
